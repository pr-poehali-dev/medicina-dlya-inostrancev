import React, { createContext, useContext, useState, ReactNode } from "react";

interface Language {
  code: "ru" | "en";
  name: string;
  flag: string;
}

interface Translations {
  nav: {
    services: string;
    about: string;
    contact: string;
  };
  hero: {
    title: string;
    subtitle: string;
    cta: string;
    emergency: string;
  };
  services: {
    title: string;
    diagnosis: {
      title: string;
      description: string;
    };
    treatment: {
      title: string;
      description: string;
    };
    support: {
      title: string;
      description: string;
    };
  };
  features: {
    title: string;
    multilingual: {
      title: string;
      description: string;
    };
    available: {
      title: string;
      description: string;
    };
    professional: {
      title: string;
      description: string;
    };
  };
  about: {
    title: string;
    description: string;
  };
  contact: {
    title: string;
    emergency: string;
    phone: string;
    email: string;
    address: string;
  };
}

const languages: Language[] = [
  { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
  { code: "en", name: "English", flag: "üá∫üá∏" },
];

const translations: Record<string, Translations> = {
  ru: {
    nav: {
      services: "–£—Å–ª—É–≥–∏",
      about: "–û –Ω–∞—Å",
      contact: "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
    },
    hero: {
      title: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–∞–º –≤ –†–æ—Å—Å–∏–∏",
      subtitle: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤–∞—à–µ–º —è–∑—ã–∫–µ",
      cta: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
      emergency: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å 24/7",
    },
    services: {
      title: "–ù–∞—à–∏ —É—Å–ª—É–≥–∏",
      diagnosis: {
        title: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
        description:
          "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
      },
      treatment: {
        title: "–õ–µ—á–µ–Ω–∏–µ",
        description: "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
      },
      support: {
        title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        description: "–ü–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
      },
    },
    features: {
      title: "–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å",
      multilingual: {
        title: "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å",
        description: "–û–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö",
      },
      available: {
        title: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 24/7",
        description: "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö",
      },
      professional: {
        title: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º",
        description: "–û–ø—ã—Ç–Ω—ã–µ –≤—Ä–∞—á–∏ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π",
      },
    },
    about: {
      title: "–û –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ",
      description:
        "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –≤ –†–æ—Å—Å–∏–∏. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —è–∑—ã–∫–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.",
    },
    contact: {
      title: "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      emergency: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è",
      phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
      email: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞",
      address: "–ê–¥—Ä–µ—Å",
    },
  },
  en: {
    nav: {
      services: "Services",
      about: "About",
      contact: "Contact",
    },
    hero: {
      title: "Medical Assistance for Foreigners in Russia",
      subtitle: "Professional medical support in your language",
      cta: "Get Consultation",
      emergency: "Emergency Help 24/7",
    },
    services: {
      title: "Our Services",
      diagnosis: {
        title: "Diagnosis",
        description: "Comprehensive examination using modern equipment",
      },
      treatment: {
        title: "Treatment",
        description: "Qualified treatment according to international standards",
      },
      support: {
        title: "Support",
        description:
          "Assistance with documents and medical terminology translation",
      },
    },
    features: {
      title: "Why Choose Us",
      multilingual: {
        title: "Multilingual",
        description: "Communication in Russian and English",
      },
      available: {
        title: "24/7 Availability",
        description: "Round-the-clock support in emergency cases",
      },
      professional: {
        title: "Professionalism",
        description: "Experienced doctors with international practice",
      },
    },
    about: {
      title: "About Our Center",
      description:
        "We specialize in providing medical assistance to foreign citizens in Russia. Our team ensures quality medical care taking into account cultural features and language needs of patients.",
    },
    contact: {
      title: "Contact Information",
      emergency: "Emergency Line",
      phone: "Phone",
      email: "Email",
      address: "Address",
    },
  },
};

interface LanguageContextType {
  currentLanguage: Language;
  translations: Translations;
  changeLanguage: (code: "ru" | "en") => void;
  languages: Language[];
}

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined,
);

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(
    languages[0],
  );

  const changeLanguage = (code: "ru" | "en") => {
    const language = languages.find((lang) => lang.code === code);
    if (language) {
      setCurrentLanguage(language);
    }
  };

  const value = {
    currentLanguage,
    translations: translations[currentLanguage.code],
    changeLanguage,
    languages,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
};
